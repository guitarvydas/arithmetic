Arithmetic {
  /* WASM code emitter */
  
  Top = Exp
  
  Exp
    = AddExp

  AddExp
    = AddExp "+" MulExp  -- plus
    | AddExp "-" MulExp  -- minus
    | MulExp

  MulExp
    = MulExp "*" ExpExp  -- times
    | MulExp "/" ExpExp  -- divide
    | ExpExp

  ExpExp
    = PriExp "^" ExpExp  -- power
    | PriExp

  PriExp
    = "(" Exp ")"  -- paren
    | "+" PriExp   -- pos
    | "-" PriExp   -- neg
    | ident
    | number

  ident  (an identifier)
    = letter alnum*

  number  (a number)
    = digit* "." digit+  -- fract
    | digit+             -- whole
}

  Top [e] = 
{{ 
   console.log ("(module");
   console.log ( " (func $custom (param $x f64) (param $y f64) (result f64)" );
}}
[[
${e})
  (export "custom" (func $custom))
)
    ]]
  Exp [e] = [[${e}]]
  AddExp_plus [e1 op e2] = [[${e1}\n${e2}\nf64.add\n]]
  AddExp_minus [e1 op e2] = [[${e1}\n${e2}\nf64.sub\n]]
  AddExp [e] = [[${e}]]
  MulExp_times [e1 op e2] = [[${e1}\n${e2}\nf64.mul\n]]
  MulExp_divide [e1 op e2] = [[${e1}\n${e2}\nf64.div\n]]
  MulExp [e] = [[${e}]]
  ExpExp_power[p op e] = [[(???exp ${p} ${e})]]
  ExpExp [p] = [[${p}]]
  PriExp_paren [lp p rp] = [[${p}]]
  PriExp_pos [sign p] = [[${p}]]
  PriExp_neg [sign p] = [[${p}\nf64.neg]]
  PriExp [p] = [[${p}]]
  ident [l @a] = [[local.get \$${l}${a}]]
  number_fract [@numerator dot @denominator] = [[f64.const ${numerator}.${denominator}]]
  number_whole [@n] = [[f64.const ${n}]]
